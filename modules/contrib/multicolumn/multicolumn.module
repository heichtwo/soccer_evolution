<?php

/**
 * @file
 * A filter that generates a multi-column list.
 *
 * Lines between the tags <multicolumn cols="3"> and </multicolumn> are turned
 * into 3 unordered lists, and these lists are arranged side by side.
 *
 * The module provides themeable functions theme_multicolumn_list() and
 * theme_multicolumn_row() that the designer can override. The first specifies
 * how lines are made into a list, and the default implementation returns a
 * renderable array. The second specifies how columns are arranged into a
 * row, and the default implementation uses a <div class="..."> for each row.
 * A third function, theme_multicolumn_comment(), is used to format HTML
 * comments such as <!-- multicolumn start -->.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\filter\FilterFormatInterface;

/**
 * Implements hook_help().
 */
function multicolumn_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the multicolumn module.
    case 'help.page.multicolumn':
      $output = '';
      $output .= '<p>' . t('A filter that generates a multi-column unordered list.') . '</p>';
      $output .= '<p>' . t('Lines between the tags %open and %close are turned into 3 unordered lists, and these lists are arranged side by side.',
        ['%open' => '<multicolumn cols="3">', '%close' => '</multicolumn>']
      ) . '</p>';
      $output .= '<p>' . t('If you use the HTML filter after this one, be sure that it allows the tags used to format the lists. By default, the tags used are @tags, but these can be changed by the theme.',
        ['@tags' => 'ol, ul, li, div']
      ) . '</p>';
      $output .= '<p>' . t('You can add the Multicolumn filter to a text format on the <a href=":formats">Text formats page</a>. Once you have done so, detailed usage information will be available on the <a href="@tips">Filter tips</a> page.', [
        ':formats' => Url::fromRoute('filter.admin_overview')->toString(),
        '@tips' => Url::fromRoute('filter.tips_all')->toString(),
      ]) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function multicolumn_theme() {
  return [
    'multicolumn_list' => [
      'variables' => ['items' => [], 'columns' => 1, 'type' => 'ul', 'attributes' => []],
    ],
    'multicolumn_row' => [
      'variables' => ['items' => []],
    ],
    'multicolumn_comment' => [
      'variables' => ['text' => 'multicolumn'],
    ],
  ];
}

/**
 * Prepares variables for multicolumn list template.
 *
 * Default template: multicolumn-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items:  An array of items in the list.
 *   - columns:  The number of columns, of which this will be one.
 *   - type:  The type of the list (e.g., "ul" or "ol").
 *   - attributes: An array of attributes to be added to the outer element.
 */
function template_preprocess_multicolumn_list(&$variables) {
  // Tweak the attributes.
  $attributes = $variables['attributes'];
  $width = floor(100 / $variables['columns']);
  // Make sure $attributes['style'] is set.
  $attributes += ['style' => ''];
  $attributes['style'] = "width: $width%;{$attributes['style']}";

  // Tweak the type.
  $type = $variables['type'];
  if ($type == 'plain') {
    // Add a class. multicolumn.css contains corresponding CSS rules.
    // First, make sure $attributes['class'] is set.
    $attributes += ['class' => ''];
    $attributes['class'] = rtrim('plain ' . $attributes['class']);
  }
  if ($type != 'ol') {
    // Convert 'plain' or anything strange to 'ul'.
    $type = 'ul';
  }

  // Save the results.
  $variables['attributes'] = $attributes;
  $variables['type'] = $type;
}

/**
 * Prepares variables for multicolumn template.
 *
 * Default template: multicolumn.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items:  An array of render elements, one for each column.
 */
function template_preprocess_multicolumn_row(&$variables) {
  $columns = count($variables['items']);
  $variables['class'] = "multicolumn multicolumn-$columns";
}
